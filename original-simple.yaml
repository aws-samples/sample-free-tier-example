AWSTemplateFormatVersion: '2010-09-09'
Description: 'Ultra-Simple AWS Workshop - EC2 + Lambda + Bedrock (Original Version)'

Parameters:
  MyIPAddress:
    Type: String
    Description: Your IP address for secure access (format x.x.x.x/32)
    #Default: 0.0.0.0/0 use https://checkip.amazonaws.com/
    AllowedPattern: '^([0-9]{1,3}\.){3}[0-9]{1,3}/[0-9]{1,2}$'
    ConstraintDescription: Must be a valid IP address in CIDR format (e.g., 203.0.113.25/32)

Resources:
  # IAM Role for Lambda
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: '*'

  # Lambda Function
  WorkshopFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: workshop-demo
      Runtime: python3.9
      Handler: index.lambda_handler
      Role: !GetAtt LambdaRole.Arn
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          from datetime import datetime
          
          def lambda_handler(event, context):
              try:
                  # Parse input
                  if 'body' in event and isinstance(event['body'], str):
                      body = json.loads(event['body'])
                  else:
                      body = event
                      
                  user_input = body.get('user_input', 'Hello AWS!')
                  
                  # Call Bedrock
                  bedrock = boto3.client('bedrock-runtime', region_name='us-east-1')
                  
                  response = bedrock.invoke_model(
                      modelId='anthropic.claude-3-haiku-20240307-v1:0',
                      body=json.dumps({
                          "anthropic_version": "bedrock-2023-05-31",
                          "max_tokens": 100,
                          "messages": [{"role": "user", "content": f"Respond briefly to: {user_input}"}]
                      })
                  )
                  
                  ai_response = json.loads(response['body'].read())['content'][0]['text']
                  
                  return {
                      'statusCode': 200,
                      'headers': {
                          'Access-Control-Allow-Origin': '*',
                          'Content-Type': 'application/json'
                      },
                      'body': json.dumps({
                          'ai_response': ai_response,
                          'timestamp': datetime.now().isoformat(),
                          'user_input': user_input
                      })
                  }
                  
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'headers': {'Access-Control-Allow-Origin': '*'},
                      'body': json.dumps({'error': str(e)})
                  }

  # IAM Role for EC2 to invoke Lambda
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaInvokeAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt WorkshopFunction.Arn

  # Instance Profile for EC2
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role

  # EC2 Security Group
  WebSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref MyIPAddress

  # EC2 Instance
  WebServer:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-0c02fb55956c7d316  # Amazon Linux 2
      InstanceType: t3.micro
      SecurityGroupIds:
        - !Ref WebSecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum update -y
          yum install -y httpd python3-pip
          pip3 install boto3
          systemctl start httpd
          systemctl enable httpd
          
          cat > /var/www/html/index.html << 'EOF'
          <!DOCTYPE html>
          <html>
          <head>
              <title>AWS Workshop</title>
              <style>
                  body { font-family: Arial; margin: 40px; background: #f0f0f0; }
                  .container { max-width: 600px; margin: 0 auto; background: white; padding: 30px; border-radius: 10px; }
                  h1 { color: #232f3e; text-align: center; }
                  button { background: #ff9900; color: white; padding: 15px 30px; border: none; border-radius: 5px; cursor: pointer; font-size: 16px; margin: 10px; }
                  button:hover { background: #e88b00; }
                  input { width: 100%; padding: 10px; margin: 10px 0; border: 1px solid #ddd; border-radius: 5px; }
                  #result { margin-top: 20px; padding: 15px; background: #e8f5e8; border-radius: 5px; display: none; }
                  .service { background: #f8f9fa; padding: 10px; margin: 5px 0; border-left: 4px solid #ff9900; }
              </style>
          </head>
          <body>
              <div class="container">
                  <h1>üöÄ AWS Workshop Demo</h1>
                  
                  <div class="service"><strong>EC2:</strong> Hosting this webpage</div>
                  <div class="service"><strong>Lambda:</strong> Processing requests</div>
                  <div class="service"><strong>Bedrock:</strong> AI responses</div>
                  
                  <hr>
                  <input type="text" id="userInput" placeholder="Ask the AI something..." value="What is AWS?">
                  <button onclick="callAI()">ü§ñ Ask AI via Lambda</button>
                  
                  <div id="result"></div>
              </div>
              
              <script>
                  async function callAI() {
                      const input = document.getElementById('userInput').value;
                      const result = document.getElementById('result');
                      
                      result.style.display = 'block';
                      result.innerHTML = '‚è≥ Calling Lambda + Bedrock...';
                      
                      try {
                          const response = await fetch('/invoke-lambda', {
                              method: 'POST',
                              headers: { 
                                  'Content-Type': 'application/json'
                              },
                              body: JSON.stringify({ user_input: input })
                          });
                          
                          const data = await response.json();
                          
                          if (response.ok) {
                              result.innerHTML = 
                                  '<h3>‚úÖ Success!</h3>' +
                                  '<p><strong>You asked:</strong> ' + data.user_input + '</p>' +
                                  '<p><strong>AI Response:</strong> ' + data.ai_response + '</p>' +
                                  '<p><strong>Time:</strong> ' + data.timestamp + '</p>' +
                                  '<hr>' +
                                  '<small>üîÑ Flow: Browser ‚Üí EC2 ‚Üí Lambda ‚Üí Bedrock ‚Üí Response</small>';
                          } else {
                              result.innerHTML = '<h3>‚ùå Error:</h3><p>' + (data.error || 'Unknown error') + '</p>';
                          }
                      } catch (error) {
                          result.innerHTML = '<h3>‚ùå Network Error:</h3><p>' + error.message + '</p>';
                      }
                  }
              </script>
          </body>
          </html>
          EOF
          
          # Create Python CGI script to invoke Lambda
          mkdir -p /var/www/cgi-bin
          cat > /var/www/cgi-bin/invoke-lambda.py << 'PYTHON_EOF'
          #!/usr/bin/env python3
          import json
          import boto3
          import cgi
          import cgitb
          import sys
          import os
          
          # Enable CGI error reporting
          cgitb.enable()
          
          # Set content type
          print("Content-Type: application/json")
          print("Access-Control-Allow-Origin: *")
          print("Access-Control-Allow-Methods: POST, OPTIONS")
          print("Access-Control-Allow-Headers: Content-Type")
          print()  # Empty line required
          
          try:
              # Handle OPTIONS request for CORS
              if os.environ.get('REQUEST_METHOD') == 'OPTIONS':
                  print(json.dumps({"status": "ok"}))
                  sys.exit(0)
              
              # Read POST data
              content_length = int(os.environ.get('CONTENT_LENGTH', 0))
              if content_length > 0:
                  post_data = sys.stdin.read(content_length)
                  data = json.loads(post_data)
              else:
                  data = {"user_input": "Hello AWS!"}
              
              # Invoke Lambda function
              lambda_client = boto3.client('lambda', region_name='${AWS::Region}')
              
              response = lambda_client.invoke(
                  FunctionName='${WorkshopFunction}',
                  InvocationType='RequestResponse',
                  Payload=json.dumps(data)
              )
              
              # Parse Lambda response
              lambda_response = json.loads(response['Payload'].read())
              
              if response['StatusCode'] == 200:
                  if 'body' in lambda_response:
                      # Lambda returned HTTP response format
                      result = json.loads(lambda_response['body'])
                  else:
                      # Lambda returned direct response
                      result = lambda_response
                  print(json.dumps(result))
              else:
                  print(json.dumps({"error": "Lambda invocation failed"}))
                  
          except Exception as e:
              print(json.dumps({"error": str(e)}))
          PYTHON_EOF
          
          chmod +x /var/www/cgi-bin/invoke-lambda.py
          
          # Configure Apache for CGI
          cat >> /etc/httpd/conf/httpd.conf << 'APACHE_EOF'
          
          # Enable CGI
          LoadModule cgi_module modules/mod_cgi.so
          ScriptAlias /invoke-lambda /var/www/cgi-bin/invoke-lambda.py
          
          <Directory "/var/www/cgi-bin">
              AllowOverride None
              Options ExecCGI
              Require all granted
          </Directory>
          APACHE_EOF
          
          systemctl restart httpd
      Tags:
        - Key: Name
          Value: workshop-web-server

Outputs:
  WebsiteURL:
    Description: Workshop website URL
    Value: !Sub 'http://${WebServer.PublicDnsName}'
    
  LambdaFunctionName:
    Description: Lambda function name
    Value: !Ref WorkshopFunction